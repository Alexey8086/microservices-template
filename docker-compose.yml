version: '2.1'

services:

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api
    env_file: .env
    environment:
      SERVICES: api
      PORT: ${PORT_API_SERVICE}
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - jaeger-collector
      - jaeger-query
      - jaeger-agent
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=8000"
    networks:
      - appnet
    restart: unless-stopped

  auth:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: auth
    env_file: .env
    environment:
      SERVICES: auth
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - jaeger-collector
      - jaeger-query
      - jaeger-agent
    networks:
      - appnet
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    command: postgres -c listen_addresses='*'
    ports:
      - "${POSTGRES_PORT1}:${POSTGRES_PORT2}"
    networks:
      - appnet
    restart: unless-stopped

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq-server
    image: 'rabbitmq:3'
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    ports:
      - "${PORT1_RABBIT}:${PORT2_RABBIT}"
      - "${PORT3_RABBIT}:${PORT4_RABBIT}"
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    networks:
      - appnet
    restart: unless-stopped

  redis:
    container_name: redis
    hostname: redis-server
    image: redis:latest
    ports:
      - "${PORT1_REDIS}:${PORT2_REDIS}"
    volumes:
      - /path/to/local/d–∞ta:/root/redis
      - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - appnet
    environment:
    #   - REDIS_PASSWORD=12345
      - REDIS_PORT="${PORT1_REDIS}"
    #   - REDIS_DATABASES=16
    restart: unless-stopped

  traefik:
    container_name: traefik
    image: traefik:v2.4
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - "${PORT_API_SERVICE}:${PORT2_TRAEFIK}"
      - "${PORT3_TRAEFIK}:${PORT4_TRAEFIK}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internet
      - appnet
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - appnet
      - default

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - appnet
      - default

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    user: '0'
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

  alertmanager-bot:
    command:
      - --alertmanager.url=http://alertmanager:9093
      - --log.level=info
      - --store=bolt
      - --bolt.path=/data/bot.db
      - --telegram.admin=5007982044
      - --telegram.token=6370871989:AAGEs1xJ0bXShobr4ZrAk_1f_HuwYlK8GeI
    image: metalmatze/alertmanager-bot:0.4.3
    user: root
    ports:
      - 8085:8085
    container_name: alertmanager-bot
    hostname: alertmanager-bot
    environment:
      TZ: "Europe/Moscow"
    restart: unless-stopped
    volumes:
      - ./data:/data
    networks:
      - default

  alertmanager:
    image: prom/alertmanager:v0.21.0
    user: root
    ports:
      - 127.0.0.1:9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    container_name: alertmanager
    hostname: alertmanager
    environment:
      TZ: "Europe/Moscow"
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/etc/alertmanager/data'
    networks:
      - default

  elasticsearch:
    image: elasticsearch:7.9.3
    networks:
      - appnet
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
    networks:
      - appnet
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--log-level=error"
    ]
    depends_on:
      - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    networks:
      - appnet
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    networks:
      - appnet
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    depends_on:
      - jaeger-agent

networks:
  internet:
    name: internet
    driver: bridge
  appnet:
    name: appnet
    driver: bridge
  default:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  pg_data:
  prom_data:
  esdata:
    driver: local
  grafana-storage: {}
